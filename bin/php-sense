#!/usr/bin/php
<?php

set_error_handler(fn (
    int $errno,
    string $errstr,
    string $errfile,
    int $errline,
) => throw new \Exception($errstr . "\n" . "{$errfile}:{$errline}\n", $errno));
ini_set('error_reporting', E_ALL);
ini_set('display_errors', 0);
ini_set('log_errors', 1);
ini_set('error_log', '/tmp/php-sense-log');

require __DIR__ . '/../vendor/autoload.php';
use Symfony\Component\VarDumper\Cloner\VarCloner;
use Symfony\Component\VarDumper\Dumper\CliDumper;
use Symfony\Component\VarDumper\Dumper\ContextProvider\CliContextProvider;
use Symfony\Component\VarDumper\Dumper\ContextProvider\SourceContextProvider;
use Symfony\Component\VarDumper\Dumper\HtmlDumper;
use Symfony\Component\VarDumper\Dumper\ServerDumper;
use Symfony\Component\VarDumper\VarDumper;

$cloner = new VarCloner();
$fallbackDumper = \in_array(\PHP_SAPI, ['cli', 'phpdbg']) ? new CliDumper() : new HtmlDumper();
$dumper = new ServerDumper('tcp://127.0.0.1:9912', $fallbackDumper, [
    'cli' => new CliContextProvider(),
    'source' => new SourceContextProvider(),
]);

VarDumper::setHandler(function ($var) use ($cloner, $dumper) {
    $dumper->dump($cloner->cloneVar($var));
});
function l($txt) {
    dump($txt);
    // if (is_array($txt)) {
    //     $txt = json_encode($txt);
    // }
    // file_put_contents('/tmp/php-sense-log', '###'.PHP_EOL.trim($txt).PHP_EOL.'###'.PHP_EOL, FILE_APPEND);
}


l("-started-");
Talbergs\Kernel::listen();
